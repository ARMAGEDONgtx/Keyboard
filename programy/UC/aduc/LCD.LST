C51 COMPILER V9.56.0.0   LCD                                                               12/22/2017 23:32:57 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: D:\program files\keil\C51\BIN\C51.EXE LCD.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*!
   2            @author Michal Wróblewski
   3            @file LCD.c
   4            @date 03-11-2017
   5            @brief AduC831 LAB04
   6          */
   7          //#define _COMP_LCD__
   8          
   9          #ifndef _COMP_LCD__
  10          
  11          #ifndef _LCD_C__
  12          #define _LCD_C__
  13          #include "aduc831.h"
  14          #include "functions.h"
  15          #include <stdarg.h>
  16          #include <stdio.h>
  17          #define LCDRS MCO  
  18          #define LCDRW MDO
  19          #define LCDDANE P0 
  20          sbit LCDZgoda = P2^0;
  21          
  22          
  23          //! bardziej ogolna funkcja do wysylania danych
  24          void LCD_wyslij(char dane, bit RS, bit RW)
  25          {
  26   1        LCDZgoda = 1;
  27   1        LCDRS = RS;
  28   1        LCDRW = RW;
  29   1        LCDDANE = dane;
  30   1        LCDZgoda = 0;
  31   1        delay(50);
  32   1        LCDZgoda = 1;
  33   1        delay(500);
  34   1      }
  35          
  36          //! COMMANDS***********************************************************
  37          /*! Display clear - (RS = 0, R/W = 0, dane = 00000001) -instrukcja ta powoduje wyczyszczenie wyswietlacza 
             -poprzez wypelnienie go spacjami,
  38          ustawienie trybu zapisu danych od pozycji w lewym górnym rogu wyswietlacza oraz wylaczenie trybu przesuwan
             -ia okna*/
  39          void Display_clear(void)
  40          {
  41   1        LCD_wyslij(0x01,0,0);
  42   1        delay_us(1540);
  43   1      }
  44          /*! Display/cursor home - (RS - 0, R/W = 0, dane = 0000001x) -
  45          instrukcja powoduje ustawienie kursora na pozycji pierwszego znaku w pierwszej linii*/
  46          void Cursor_home(void)
  47          {
  48   1        LCD_wyslij(0x02,0,0);
  49   1        delay_us(1540);
  50   1      }
  51          /*! Entry mode set - (RS = 0; R/W = 0, dane = 000001IS) - okreslenie trybu pracy kursora/okna wyswietlacza
             - :
  52          - dla S = 1 po zapisaniu znaku do wyswietlacza kursor nie zmienia polozenia, natomiast przesuwa sie cala z
C51 COMPILER V9.56.0.0   LCD                                                               12/22/2017 23:32:57 PAGE 2   

             -awartosc wyswietlacza
  53          - dla S = 0 po zapisaniu znaku do wyswietlacza kursor zmienia polozenie, a przesuwanie okna jest wylaczone
  54          - dla I = 1 kursor lub okno wyswietlacza przesuwa sie w prawo (inkrementacja adresu znaku)
  55          - dla I = 0 kursor lub okno wyswietlacza przesuwa sie w lewo (dekrementacja adresu znaku)*/
  56          void Entry_mode(int I, int S )
  57          {
  58   1        LCD_wyslij(0x04+0x2*I+0x1*S,0,0);
  59   1      }
  60          /*! Display ON/OFF - (RS = 0, R/W = 0, dane = 00001DCB)
  61          - dla D = 1 - wlaczenie wyswietlacza - dla D = 0 - wylaczenie wyswietlacza
  62          - dla C = 1 - wlaczenie kursora - dla C = 0 - wylaczenie kursora
  63          - dla B = 1 - wlaczenie migania kursora - dla B = 0 - wylaczenie migania kursora*/
  64          void Display_ON_OFF(int D, int C,int B)
  65          {
  66   1        LCD_wyslij(0x08+0x4*D+0x2*C+0x1*B, 0,0);
  67   1      }
  68          /* !Display cursor shift - (RS = 0, R/W = 0, dane = 0001SRxx)
  69          - dla S = 1 - przesuwana jest zawartosc okna - dla S = 0 - przesuwany jest kursor
  70          - dla R = 1 - kierunek przesuwu w prawo - dla R = 0 - kierunek przesuwu w lewo*/
  71          void Display_Cursor_shift(int S, int R)
  72          {
  73   1        LCDZgoda = 1;
  74   1        LCDRS = 0;
  75   1        LCDRW = 0;
  76   1        LCDDANE=0x10+0x8*S+0x4*R;
  77   1        LCDZgoda = 0;
  78   1        delay_us(37);
  79   1      }
  80          /*! Function set (RS= 0,  R/W = 0, dane = 001DNFxx)
  81          - dla D = 1 - interfejs 8-bitowy - dla D = 0 - interfejs 4-bitowy
  82          - dla N = 1 - wyswietlacz dwuwierszowy - dla N = 0 - wyswietlacz jednowierszowy
  83          - dla F = 1 - matryca znaków 5*10 punktów - dla F = 0 - matryca znaków 5*7punktów*/
  84          void Function_set(int D, int N,int F)
  85          {
  86   1        LCD_wyslij(0x20+0x10*D+0x8*N+0x4*F,0,0);
  87   1      }
  88          /*! CG RAM set - (RS= 0, RW = 0, dane = 01AAALLL) - ustawia adres pamieci generatora znaków.
  89          AAA - 3-bitowy adres znaku, LLL - 3-bitowy numer linii skladajacej sie na graficzne odwzorowanie znaku.*/
  90          void CG_RAM_set(int ADRES)
  91          {
  92   1        LCDZgoda = 1;
  93   1        LCDRS = 0;
  94   1        LCDRW = 0;
  95   1        LCDDANE=0x40+ADRES;
  96   1        LCDZgoda = 0;
  97   1        delay_us(37);
  98   1      }
  99          /*! DD RAM set - (RS = 0, R/W = 0, dane = 1AAAAAAA) - ustawia adres pamieci wyswietlacza,
 100          pod który nastapi zapis (badz odczyt) danych operacja Data write lub Data read.*/
 101          void DD_RAM_set(int ADRES)
 102          {
 103   1        LCDZgoda = 1;
 104   1        LCDRS = 0;
 105   1        LCDRW = 0;
 106   1        LCDDANE=0x80+ADRES;
 107   1        LCDZgoda = 0;
 108   1        delay_us(37);
 109   1      }
 110          void LCD_GoTo(unsigned char x, unsigned char y)
 111          {
 112   1        LCD_wyslij(0x80 | (x + (0x40 * y)), 0 ,0);
 113   1      }
C51 COMPILER V9.56.0.0   LCD                                                               12/22/2017 23:32:57 PAGE 3   

 114          
 115          /*! Data write - (RS = 1, R/W = 0, dane = zapisywany bajt danych) - zapis danych do pamieci wyswietlacza,
 116          badz pamieci CG RAM (jesli poprzednio wydano komende CG RAM set)*/
 117          void Data_Write(int DANA)
 118          {
 119   1        LCDZgoda = 1;
 120   1        LCDRS = 1;
 121   1        LCDRW = 0;
 122   1        LCDDANE = DANA;
 123   1        LCDZgoda = 0;
 124   1        delay_us(37);
 125   1      }
 126          /*! Data read - (RS = 1, R/W= 1, dane = odczytywany bajt danych) - odczyt danych z pamieci wyswietlacza,
 127          badz pamieci CG RAM (jesli poprzednio wydano komende CG RAM set)*/
 128          char Data_Read()
 129          {
 130   1        LCDZgoda = 1;
 131   1        LCDRS = 1;
 132   1        LCDRW = 1;
 133   1        LCDZgoda = 0;
 134   1        delay_us(37);
 135   1        return (LCDDANE);
 136   1      }
 137          
 138          //! inicjalizacja wyswietlacza
 139          void LCD_inicjalizacja()
 140          {
 141   1        I2CM = 1;
 142   1        MDE = 1;
 143   1        
 144   1        delay_ms(20);
 145   1        LCD_wyslij(0x30,0,0);
 146   1        delay_ms(5);
 147   1        LCD_wyslij(0x30,0,0);
 148   1        delay_ms(1);
 149   1        LCD_wyslij(0x30,0,0);
 150   1        //!ustawiania wyswieltacza
 151   1        Function_set(1,1,0);
 152   1        Display_ON_OFF(0,0,0); //!disp off
 153   1        Display_clear(); //! disp clear
 154   1        delay_ms(1);
 155   1        Entry_mode(1,0); //! disp entry mode
 156   1        Display_ON_OFF(1,0,0);
 157   1      }
 158          
 159          
 160          void LCD_czekaj(int n)
 161          {
 162   1        
 163   1      }
*** WARNING C280 IN LINE 160 OF LCD.c: 'n': unreferenced local variable
 164          
 165          //! wysylanie pojedzynczego znaku
 166          void LCD_znak(char znak)
 167          {
 168   1        LCD_wyslij(znak,1,0);
 169   1      }
 170          
 171          void LCD_wyslij_str(char *str)
 172          {
 173   1        while(*str != '\0')
 174   1        {
C51 COMPILER V9.56.0.0   LCD                                                               12/22/2017 23:32:57 PAGE 4   

 175   2          LCD_znak(*str);
 176   2          str++;
 177   2        }
 178   1      }
 179          
 180          void Printf_LCD (const char *format, ...)
 181          {
 182   1        xdata char buffer[20];
 183   1        va_list args;
 184   1        va_start (args, format);
 185   1        vsprintf (buffer,format, args);
 186   1        LCD_wyslij_str(buffer);
 187   1        va_end (args);
 188   1      }
 189          
 190          
 191          
 192          #endif
 193          
 194          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    444    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
