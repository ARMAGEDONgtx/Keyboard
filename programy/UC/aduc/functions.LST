C51 COMPILER V9.56.0.0   FUNCTIONS                                                         01/22/2018 23:04:14 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE FUNCTIONS
OBJECT MODULE PLACED IN functions.OBJ
COMPILER INVOKED BY: D:\program files\keill\C51\BIN\C51.EXE functions.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEN
                    -D TABS(2)

line level    source

   1          /*!
   2            @author Michal Wróblewski
   3            @file functions.c
   4            @date 22-12-2017
   5            @brief Biblioteka funkcji
   6            
   7          */
   8          
   9          #include "int_lib.h"
  10          #include "dio.h"
  11          #include "main.h"
  12          
  13          /*!
  14          opoznienie na podstawie liczby cykli maszynowych
  15          */
  16          void delay(int cycles)
  17          {
  18   1        int i = 0;
  19   1        for(i; i<cycles;i++)
  20   1        {
  21   2          //doing nothing
  22   2        }
  23   1      }
  24          
  25          /*! 
  26          opoznienie na podstawie czasu
  27          przez obliczenia tracimy jakies 1.988ms, na if'ie kolejne bysmy tracili
  28          */
  29          void delay_ms(int ms)
  30          {
  31   1        uint32_t cycles = ((float)ms - 2.0 - 0.022)/0.016 + 0.5;
  32   1        delay(cycles);
  33   1      }
  34          
  35          /*!
  36          Opoznienie w mikrosekundach , bazuje na poporzednich funkcjach delay
  37          */
  38          void delay_us(int us)
  39          {
  40   1        uint32_t cycles = ((float)us/1000.0 - 2.0 - 0.022)/0.016 + 0.5;
  41   1        delay(cycles);
  42   1      }
  43          
  44          /*!
  45          Funckja do wysylania pojednycznego chara po UART'cie
  46          czekamy az TI bedzie jedynka, to oznacza tramsjie
  47          potem zerujemy TI
  48          */
  49          void UART_wyslij(char c)
  50          {
  51   1        SBUF = c;
  52   1        while(!TI){}
  53   1        TI = 0;
  54   1      
C51 COMPILER V9.56.0.0   FUNCTIONS                                                         01/22/2018 23:04:14 PAGE 2   

  55   1      }   
  56              
  57          /*!
  58          Funckja bazujaca na UART_wyslij, tylko wysylamy cala
  59          tablice char'ow, konieczne jest podanie rozmiaru
  60          */
  61          void UART_wyslij_str(char* str, int ile)
  62          {
  63   1        int i;
  64   1        for(i = 0 ; i < ile; i++)
  65   1        {
  66   2          UART_wyslij(str[i]);
  67   2        }
  68   1      } 
  69          
  70          /*!
  71          Przerwanie od UARTA, odczytuje dane z UARTA az do otrzymania '!'
  72          wtedy wyciagam dane z buffora i przepisuje do tablicy z vartosciami,
  73          kazda wartosc jest przypisana do przyciusku klawiatury,
  74          po otryzmaniu '!' wystawiam zdanie 'reply' -> patrz inne funckje
  75          */
  76          void UART_obsluga(void)interrupt 4
  77          {
  78   1        char odbior;
  79   1        if(RI)
  80   1        {
  81   2          UART_buff[UART_counter] = SBUF;
  82   2          odbior = UART_buff[UART_counter];
  83   2          RI = 0;
  84   2          UART_counter++;
  85   2        }
  86   1        if(odbior == '!' || UART_counter >= 50)
  87   1        {
  88   2          sscanf(UART_buff, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
  89   2          &keypad_values[0], &keypad_values[1],&keypad_values[2],&keypad_values[3],&keypad_values[4],
  90   2          &keypad_values[5],&keypad_values[6],&keypad_values[7],&keypad_values[8],&keypad_values[9],
  91   2          &keypad_values[10],&keypad_values[11]);
  92   2          UART_counter =0;  
  93   2          reply = 1;
  94   2        }
  95   1      }
  96          
  97          /*!
  98          Wysylanie aktualnej konfiguarcji jako potwierdzenia (tymczasowo),
  99          wyciagamy wartosci z tablicy 'keypad_values' i przesylamy po UARCIE
 100          wartosc bufara jest nadmiarowa
 101          */
 102          char tmp[50];
 103          void UART_send_cfg()
 104          {
 105   1         
 106   1        sprintf(tmp, "%d %d %d %d %d %d %d %d %d %d %d %d",
 107   1        keypad_values[0], keypad_values[1],keypad_values[2],keypad_values[3],keypad_values[4],
 108   1        keypad_values[5],keypad_values[6],keypad_values[7],keypad_values[8],keypad_values[9],
 109   1        keypad_values[10],keypad_values[11]);
 110   1        
 111   1        UART_wyslij_str(tmp, 50);
 112   1        
 113   1      }
 114          
 115          
 116          /*!
C51 COMPILER V9.56.0.0   FUNCTIONS                                                         01/22/2018 23:04:14 PAGE 3   

 117          wysylanie danych o aktualnie wcisnietym przycisku,
 118          poczatki implemetnacji piosenek - nie dokoczono
 119          */
 120          void send_record(char a)
 121          {
 122   1        //unsigned int czas;
 123   1        //czas = TH1 << 8;
 124   1        //czas += TL1;
 125   1        //TH1 = 0x0;
 126   1        //TL1 = 0x0;
 127   1        //sprintf(tmp, "!%d %d", character_to_freq(a), czas);
 128   1        //UART_wyslij_str(tmp, 15);
 129   1        sprintf(tmp, "!%d", character_to_freq(a));
 130   1        UART_wyslij_str(tmp, 5);
 131   1        
 132   1        
 133   1      }
 134          
 135          /*!
 136          obsluga timera 1
 137          wysylanie danych o aktualnie wcisnietym przycisku,
 138          poczatki implemetnacji piosenek - nie dokoczono
 139          */
 140          void timer1_obsluga(void) interrupt 3
 141          {
 142   1        send_record(character);
 143   1        T1_ustaw_czas_ms(5000);
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    853    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =     50       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
